/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package footprint;

import java.awt.Color;

import java.util.Random;
import library.database.DatabaseHandler;

import java.sql.SQLException;

import javax.swing.JOptionPane;

import static footprint.mainDialog.namesP;

import java.awt.HeadlessException;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;

import javax.swing.ButtonModel;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;

import static org.apache.poi.ss.usermodel.CellType.STRING;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author you1-
 */
public class detailsEntry extends javax.swing.JFrame {

    /**
     * Creates new form detailsEntry
     */
    public detailsEntry() {
        initComponents();
        
        // = rand.nextInt(99);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        projectNameTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        RBLooming = new javax.swing.JRadioButton();
        RBCubInt = new javax.swing.JRadioButton();
        RBCubLay = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        hoursPerMonthTF = new javax.swing.JTextField();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        utilizedSidesTF = new javax.swing.JTextField();
        supportLengthTF = new javax.swing.JTextField();
        NumFinTabTF = new javax.swing.JTextField();
        numPackStatTF = new javax.swing.JTextField();
        numKitRackTF = new javax.swing.JTextField();
        numWRackTF = new javax.swing.JTextField();
        numKanRackTF = new javax.swing.JTextField();
        numMecTableTF = new javax.swing.JTextField();
        verticalCheck = new javax.swing.JCheckBox();
        horizontalCheck = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        surSup2mTF = new javax.swing.JTextField();
        surFinTabTF = new javax.swing.JTextField();
        surPackStatTF = new javax.swing.JTextField();
        surKitRackTF = new javax.swing.JTextField();
        surWRackTF = new javax.swing.JTextField();
        surKanRackTF = new javax.swing.JTextField();
        surAsseyBHTF = new javax.swing.JTextField();
        surMecTableTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        slidervalue = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        phFilePathTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        PHTable = new javax.swing.JTable();
        selectPHfile = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        addProjectBtn = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        WLAfilePTF = new javax.swing.JTextField();
        selectWLAfile = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        WLATable = new javax.swing.JTable();
        jLabel28 = new javax.swing.JLabel();
        indexTF = new javax.swing.JTextField();
        addProjectBtn1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(7, 34, 47)), "Project Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri Light", 0, 18), new java.awt.Color(7, 34, 47))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(7, 34, 47));
        jLabel1.setText("Project Name:");

        projectNameTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        projectNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNameTFActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(7, 34, 47));
        jLabel2.setText("Type:");

        RBLooming.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RBLooming);
        RBLooming.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        RBLooming.setForeground(new java.awt.Color(7, 34, 47));
        RBLooming.setText("Looming");
        RBLooming.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBLoomingActionPerformed(evt);
            }
        });

        RBCubInt.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RBCubInt);
        RBCubInt.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        RBCubInt.setForeground(new java.awt.Color(7, 34, 47));
        RBCubInt.setText("Cub Integration");
        RBCubInt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBCubIntActionPerformed(evt);
            }
        });

        RBCubLay.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(RBCubLay);
        RBCubLay.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        RBCubLay.setForeground(new java.awt.Color(7, 34, 47));
        RBCubLay.setText("Cub Lay-Up");
        RBCubLay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBCubLayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(projectNameTF))
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RBLooming)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RBCubInt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RBCubLay)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(projectNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RBCubInt)
                    .addComponent(RBLooming)
                    .addComponent(RBCubLay)))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(7, 34, 47)), "Project Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri Light", 0, 18), new java.awt.Color(7, 34, 47))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Working Hours", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri Light", 0, 18), new java.awt.Color(7, 34, 47))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(7, 34, 47));
        jLabel3.setText("N° Shifts:");

        jLabel4.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(7, 34, 47));
        jLabel4.setText("Hours per month:");

        hoursPerMonthTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        hoursPerMonthTF.setText("187.2");

        jRadioButton3.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jRadioButton3.setText("1");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jRadioButton4.setText("2");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jRadioButton6.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(jRadioButton6);
        jRadioButton6.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jRadioButton6.setText("3");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hoursPerMonthTF))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(hoursPerMonthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton6)))
        );

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel6.setText("Line Config:");

        jLabel7.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel7.setText("Utilized Sides:");

        jLabel8.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel8.setText("Support Length:");

        jLabel9.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel9.setText("Number of Finishing Table/line:");

        jLabel10.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel10.setText("N° Of Packaging Station:");

        jLabel11.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel11.setText("N° Of Kit Rack:");

        jLabel24.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel24.setText("N° Of Wires Rack:");

        jLabel12.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel12.setText("N° Of Kanban Rack:");

        jLabel23.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel23.setText("N° Of Mechanical Table:");

        utilizedSidesTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        utilizedSidesTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilizedSidesTFActionPerformed(evt);
            }
        });

        supportLengthTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        supportLengthTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supportLengthTFMouseClicked(evt);
            }
        });
        supportLengthTF.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                supportLengthTFInputMethodTextChanged(evt);
            }
        });
        supportLengthTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supportLengthTFActionPerformed(evt);
            }
        });
        supportLengthTF.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                supportLengthTFPropertyChange(evt);
            }
        });

        NumFinTabTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        numPackStatTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        numKitRackTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        numWRackTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        numKanRackTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        numMecTableTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        verticalCheck.setBackground(new java.awt.Color(255, 255, 255));
        verticalCheck.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        verticalCheck.setForeground(new java.awt.Color(7, 34, 47));
        verticalCheck.setText("Vertical");
        verticalCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalCheckActionPerformed(evt);
            }
        });

        horizontalCheck.setBackground(new java.awt.Color(255, 255, 255));
        horizontalCheck.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        horizontalCheck.setForeground(new java.awt.Color(7, 34, 47));
        horizontalCheck.setText("Horizontal");
        horizontalCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(verticalCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(horizontalCheck)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(NumFinTabTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numPackStatTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numKitRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numWRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numKanRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(numMecTableTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(utilizedSidesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(supportLengthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {NumFinTabTF, numKanRackTF, numKitRackTF, numMecTableTF, numPackStatTF, numWRackTF, supportLengthTF, utilizedSidesTF});

        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verticalCheck)
                    .addComponent(horizontalCheck))
                .addGap(7, 7, 7)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(utilizedSidesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(supportLengthTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(NumFinTabTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(numPackStatTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(numKitRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(numWRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(numKanRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(numMecTableTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Line Parameters", jPanel7);

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jLabel29.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(7, 34, 47));
        jLabel29.setText("Support 2m + WA*:");

        jLabel30.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(7, 34, 47));
        jLabel30.setText("Finishing Table + WA:");

        jLabel31.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(7, 34, 47));
        jLabel31.setText("Packaging station + WA:");

        jLabel32.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(7, 34, 47));
        jLabel32.setText("Kit Rack + WA:");

        jLabel33.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(7, 34, 47));
        jLabel33.setText("Wires Racks + WA:");

        jLabel34.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(7, 34, 47));
        jLabel34.setText("Kanban Racks + WA:");

        jLabel35.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(7, 34, 47));
        jLabel35.setText("Assey Board holders + WA:");

        jLabel26.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(7, 34, 47));
        jLabel26.setText("Mechanical Prep Table + WA:");

        jLabel36.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(7, 34, 47));
        jLabel36.setText("*Working Area");

        surSup2mTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surSup2mTF.setText("4.2");
        surSup2mTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surSup2mTFActionPerformed(evt);
            }
        });

        surFinTabTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surFinTabTF.setText("8.4");

        surPackStatTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surPackStatTF.setText("4.05");

        surKitRackTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surKitRackTF.setText("2.1");

        surWRackTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surWRackTF.setText("0.9");

        surKanRackTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surKanRackTF.setText("4.2");

        surAsseyBHTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surAsseyBHTF.setText("1.8");

        surMecTableTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        surMecTableTF.setText("0");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surSup2mTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surFinTabTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surPackStatTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surKitRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surWRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surKanRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(surAsseyBHTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(surMecTableTF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(surSup2mTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(surFinTabTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(surPackStatTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(surKitRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(surWRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(surKanRackTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(surAsseyBHTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(surMecTableTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jLabel36)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Surfaces", jPanel8);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(7, 34, 47));
        jLabel5.setText("Lay-Up Ratio (%):");

        jSlider1.setBackground(new java.awt.Color(255, 255, 255));
        jSlider1.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jSlider1.setMajorTickSpacing(10);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setPaintLabels(true);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        slidervalue.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        slidervalue.setText("50%");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slidervalue)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(slidervalue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(7, 34, 47)), "PH Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri Light", 0, 18), new java.awt.Color(7, 34, 47))); // NOI18N
        jPanel6.setForeground(new java.awt.Color(7, 34, 47));

        jLabel21.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(7, 34, 47));
        jLabel21.setText("Choose Excel file to Upload:");

        phFilePathTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N

        PHTable.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        PHTable.setForeground(new java.awt.Color(7, 34, 47));
        PHTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PH ID", "Zone", "PH/TS", "AT(H)", "Num Ops/PH", "Nb Shifts", "Ph length(M)", "N° of Board"
            }
        ));
        PHTable.setFocusable(false);
        PHTable.setGridColor(new java.awt.Color(169, 178, 186));
        PHTable.setRowHeight(20);
        PHTable.setSelectionBackground(new java.awt.Color(186, 226, 224));
        PHTable.setSelectionForeground(new java.awt.Color(27, 48, 61));
        PHTable.setShowGrid(true);
        jScrollPane1.setViewportView(PHTable);
        if (PHTable.getColumnModel().getColumnCount() > 0) {
            PHTable.getColumnModel().getColumn(0).setPreferredWidth(150);
        }

        selectPHfile.setBackground(new java.awt.Color(8, 178, 164));
        selectPHfile.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        selectPHfile.setForeground(new java.awt.Color(255, 255, 255));
        selectPHfile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectPHfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/images/icons8-microsoft-excel-20.png"))); // NOI18N
        selectPHfile.setText("Select PH File");
        selectPHfile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        selectPHfile.setOpaque(true);
        selectPHfile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectPHfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectPHfileMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectPHfileMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                selectPHfileMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(phFilePathTF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectPHfile, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phFilePathTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectPHfile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(274, 274, 274))
        );

        jSeparator1.setForeground(new java.awt.Color(169, 178, 186));

        addProjectBtn.setBackground(new java.awt.Color(8, 178, 164));
        addProjectBtn.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        addProjectBtn.setForeground(new java.awt.Color(255, 255, 255));
        addProjectBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addProjectBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/images/icons8-checked-checkbox-20 (1).png"))); // NOI18N
        addProjectBtn.setText("Confirm");
        addProjectBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(8, 178, 164), 1, true));
        addProjectBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addProjectBtn.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        addProjectBtn.setOpaque(true);
        addProjectBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addProjectBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addProjectBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addProjectBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addProjectBtnMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addProjectBtnMousePressed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(7, 34, 47)), "WLA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri Light", 0, 18), new java.awt.Color(7, 34, 47))); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(71, 216));

        jLabel27.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(7, 34, 47));
        jLabel27.setText("Enter the row index of the project in the excel file: ");

        WLAfilePTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        WLAfilePTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WLAfilePTFActionPerformed(evt);
            }
        });

        selectWLAfile.setBackground(new java.awt.Color(8, 178, 164));
        selectWLAfile.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        selectWLAfile.setForeground(new java.awt.Color(255, 255, 255));
        selectWLAfile.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        selectWLAfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/images/icons8-microsoft-excel-20.png"))); // NOI18N
        selectWLAfile.setText("Select WLA File");
        selectWLAfile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        selectWLAfile.setOpaque(true);
        selectWLAfile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        selectWLAfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectWLAfileMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                selectWLAfileMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                selectWLAfileMouseExited(evt);
            }
        });

        WLATable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Productivity"},
                {"BackLog"}
            },
            new String [] {
                "WLA"
            }
        ));
        WLATable.setPreferredSize(new java.awt.Dimension(70, 42));
        WLATable.setRequestFocusEnabled(false);
        WLATable.setRowHeight(21);
        WLATable.setSelectionBackground(new java.awt.Color(186, 226, 224));
        WLATable.setSelectionForeground(new java.awt.Color(27, 48, 61));
        jScrollPane2.setViewportView(WLATable);

        jLabel28.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(7, 34, 47));
        jLabel28.setText("Upload productivity and backlog of the project:");

        indexTF.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        indexTF.setForeground(new java.awt.Color(7, 34, 47));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 605, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(WLAfilePTF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectWLAfile, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(indexTF, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(indexTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WLAfilePTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectWLAfile, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap())
        );

        addProjectBtn1.setBackground(new java.awt.Color(255, 255, 255));
        addProjectBtn1.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        addProjectBtn1.setForeground(new java.awt.Color(7, 34, 47));
        addProjectBtn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        addProjectBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/images/icons8-cancel-20 (1).png"))); // NOI18N
        addProjectBtn1.setText("Cancel");
        addProjectBtn1.setToolTipText("");
        addProjectBtn1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(7, 34, 47), 1, true));
        addProjectBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addProjectBtn1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        addProjectBtn1.setOpaque(true);
        addProjectBtn1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addProjectBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addProjectBtn1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addProjectBtn1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 639, Short.MAX_VALUE))
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addProjectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addProjectBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addProjectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addProjectBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        slidervalue.setText("" + jSlider1.getValue() + "%");
    }//GEN-LAST:event_jSlider1StateChanged

    private void utilizedSidesTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilizedSidesTFActionPerformed
              // TODO add your handling code here:
    }//GEN-LAST:event_utilizedSidesTFActionPerformed

    private void surSup2mTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surSup2mTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_surSup2mTFActionPerformed

    private void WLAfilePTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WLAfilePTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WLAfilePTFActionPerformed

    private void addProjectBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProjectBtnMouseClicked
//        Random rand = new Random();
//        int projectID = rand.nextInt(99);
//        String projectName = projectNameTF.getText();
//        String projectType = projectTypeF;
//        int numShifts = numShiftsF;
//        String hoursPerMonth = hoursPerMonthTF.getText();
//        double layUpR = jSlider1.getValue() * 0.01;
//
//        String LineConfig = "";
//        if (verticalCheck.isSelected()) {
//            LineConfig = "Vertical";
//        } else if (horizontalCheck.isSelected()) {
//            LineConfig = "Horizontal";
//        }
//        if (verticalCheck.isSelected() && horizontalCheck.isSelected()) {
//            LineConfig = "Vertical and Horizontal";
//        }
//        
//        if (projectName.isEmpty() || numShifts == 0 || isNotNumeric(hoursPerMonth)) {
//            JOptionPane.showInternalMessageDialog(null, "Enter Project Name and Choose Number Of Shifts\n Or enter a valid number of hours per month");
//
//        } else if (isNotNumeric(supportLengthTF.getText()) || isNotNumeric(NumFinTabTF.getText())
//                || isNotNumeric(numPackStatTF.getText()) || isNotNumeric(numKitRackTF.getText())
//                || isNotNumeric(numWRackTF.getText()) || isNotNumeric(numKanRackTF.getText())
//                || isNotNumeric(numMecTableTF.getText()) || utilizedSides == 0) {
//            JOptionPane.showMessageDialog(null, "Check Data entered in The Line Parameters", "Error Occured", JOptionPane.ERROR_MESSAGE);
//        } else if (phFilePathTF.getText().isBlank() || WLAfilePTF.getText().isBlank()) {
//            JOptionPane.showMessageDialog(null, "Enter the necessary Files", "Error Occured", JOptionPane.ERROR_MESSAGE);
//        } else {
//            try {
//                //for (int i = 0; i < 15; i++) {
//                PreparedStatement statement = DatabaseHandler.getInstance().getConnection().prepareStatement(
//                        "INSERT INTO PROJECTS(id,"
//                                + "name,"
//                                + "type,"
//                                + "numShifts,"
//                                + "hoursPerMonth,"
//                                + "layUpRatio,"
//                                + "Linelength,"
//                                + "Line_Config,"
//                                + "Utilized_sides,"
//                                + "charge,capacity,"
//                                + "numOfVerticalLines,"
//                                + "supportLength,"
//                                + "NumFinTab,"
//                                + "numPackStat,"
//                                + "numKitRack,"
//                                + "numWRack,"
//                                + "numKanRack,"
//                                + "numMecTable,"
//                                + "surSup2m,"
//                                + "surFinTab,"
//                                + "surPackStat,"
//                                + "surKitRack,"
//                                + "surWRack,"
//                                + "surKanRack,"
//                                + "surAsseyBH,"
//                                + "surMecTable,  "
//                                + "month,"
//                                + "Productivity,"
//                                + "Backlog,"
//                                + "numOfSupp_R,"
//                                + "NumFinTab_R,"
//                                + "numPackStat_R,"
//                                + "numKitRack_R,"
//                                + "numWRack_R,"
//                                + "numKanRack_R,"
//                                + "numMecTable_R,"
//                                + "numAsseyBH_R,"
//                                + "surSup2m_R,"
//                                + "surFinTab_R,"
//                                + "surPackStat_R,"
//                                + "surKitRack_R,"
//                                + "surWRack_R,"
//                                + "surKanRack_R,"
//                                + "surAsseyBH_R,"
//                                + "surMecTable_R,"
//                                + "total_surface_needed) "
//                                
//                             
//                                + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//                
//                    
//                    statement.setInt(1, projectID);
//                    statement.setString(2, projectName);
//                    statement.setString(3, projectType);
//                    statement.setInt(4, numShifts);
//                    statement.setDouble(5, Double.valueOf(hoursPerMonth));
//                    statement.setDouble(6, layUpR);
//                    statement.setInt(7, lineLength);
//                    statement.setString(8, LineConfig);
//                    statement.setInt(9, utilizedSides);
//                    statement.setDouble(10, charge()[0]);
//                    double capacity = Double.valueOf(hoursPerMonth) * lineLength * utilizedSides;
//                    statement.setDouble(11,capacity );
//                    double numOfVerticalLines = charge()[0] / capacity;
//                    statement.setDouble(12, numOfVerticalLines);
//                    statement.setDouble(13, Double.valueOf(supportLengthTF.getText()));
//                    statement.setDouble(14, Double.valueOf(NumFinTabTF.getText()));
//                    statement.setDouble(15, Double.valueOf(numPackStatTF.getText()));
//                    statement.setDouble(16, Double.valueOf(numKitRackTF.getText()));
//                    statement.setDouble(17, Double.valueOf(numWRackTF.getText()));
//                    statement.setDouble(18, Double.valueOf(numKanRackTF.getText()));
//                    statement.setDouble(19, Double.valueOf(numMecTableTF.getText()));
//                    statement.setDouble(20, Double.valueOf(surSup2mTF.getText()));
//                    statement.setDouble(21, Double.valueOf(surFinTabTF.getText()));
//                    statement.setDouble(22, Double.valueOf(surPackStatTF.getText()));
//                    statement.setDouble(23, Double.valueOf(surKitRackTF.getText()));
//                    statement.setDouble(24, Double.valueOf(surWRackTF.getText()));
//                    statement.setDouble(25, Double.valueOf(surKanRackTF.getText()));
//                    statement.setDouble(26, Double.valueOf(surAsseyBHTF.getText()));
//                    statement.setDouble(27, Double.valueOf(surMecTableTF.getText()));
//                    long timeInMilliSeconds = wla[0].getMonth().getTime();
//                    java.sql.Date date1 = new java.sql.Date(timeInMilliSeconds);
//                    statement.setDate(28, date1);
//                    statement.setDouble(29, wla[0].getProd());
//                    statement.setDouble(30, wla[0].getbL());
//                    double numOfSupp_R;
//                    if (lineLength == 0 || Double.valueOf(supportLengthTF.getText()) == 0) {
//                        numOfSupp_R = numOfVerticalLines;
//                        statement.setDouble(31, numOfSupp_R);
//                    } else {
//                        numOfSupp_R = numOfVerticalLines * lineLength / Double.valueOf(supportLengthTF.getText());
//                        statement.setDouble(31, numOfSupp_R);
//                    }
//                    double NumFinTab_R = numOfVerticalLines * Double.valueOf(NumFinTabTF.getText());
//                    statement.setDouble(32, NumFinTab_R);
//                    double numPackStat_R = numOfVerticalLines * Double.valueOf(numPackStatTF.getText());
//                    statement.setDouble(33,numPackStat_R);
//                    double numKitRack_R = numOfVerticalLines *Double.valueOf(numKitRackTF.getText());
//                    statement.setDouble(34, numKitRack_R);
//                    double numWRack_R = numOfVerticalLines *Double.valueOf(numWRackTF.getText());
//                    statement.setDouble(35, numWRack_R);
//                    double numKanRack_R = numOfVerticalLines *Double.valueOf(surKanRackTF.getText());
//                    statement.setDouble(36, numKanRack_R); 
//                    double numMecTable_R = numOfVerticalLines *Double.valueOf(numMecTableTF.getText());
//                    statement.setDouble(37, numMecTable_R);
//                    double numAsseyBH_R = getAsseyH(numOfSupp_R,charge()[0],sumNumB);
//                    statement.setDouble(38, numAsseyBH_R);
//                    double surSup2m_R = numOfSupp_R * Double.valueOf(surSup2mTF.getText());
//                    double surFinTab_R = NumFinTab_R * Double.valueOf(surFinTabTF.getText());
//                    double surPackStat_R = numPackStat_R * Double.valueOf(surPackStatTF.getText());
//                    double surKitRack_R = numKitRack_R * Double.valueOf(surKitRackTF.getText());
//                    double surWRack_R = numWRack_R * Double.valueOf(surWRackTF.getText());
//                    double surKanRack_R = numKanRack_R * Double.valueOf(surKanRackTF.getText());
//                    double surAsseyBH_R = numAsseyBH_R * Double.valueOf(surAsseyBHTF.getText());
//                    double surMecTable_R = numMecTable_R * Double.valueOf(surMecTableTF.getText());
//                    double total_surface_needed = 1.1* (surSup2m_R + surFinTab_R + surPackStat_R + surKitRack_R + surWRack_R  
//                            +surKanRack_R + surAsseyBH_R +surMecTable_R);
//                    statement.setDouble(39,surSup2m_R );
//                    statement.setDouble(40,surFinTab_R );
//                    statement.setDouble(41, surPackStat_R);
//                    statement.setDouble(42,surKitRack_R );
//                    statement.setDouble(43, surWRack_R );
//                    statement.setDouble(44,surKanRack_R );
//                    statement.setDouble(45, surMecTable_R);
//                    statement.setDouble(46,surAsseyBH_R );
//                    statement.setDouble(47, total_surface_needed);
////                        System.out.print(projectID+"\t");
////                        System.out.print(projectName+"\t");
////                        System.out.print(projectType+"\t");
////                        System.out.print(numShifts+"\t");
////                        System.out.print(Double.valueOf(hoursPerMonth)+"\t");
////                        System.out.print(layUpR+"\t");
////                        System.out.print(lineLength+"\t");
////                        System.out.print(LineConfig+"\t");
////                        System.out.print(utilizedSides+"\t");
////                        System.out.print(charge()[0]+"\t");
////                        System.out.print(capacity+"\t");
////                        System.out.print(numOfVerticalLines+"\t");
////                        System.out.print( Double.valueOf(supportLengthTF.getText())+"\t");
////                        System.out.print(Double.valueOf(NumFinTabTF.getText())+"\t");
////                        System.out.print(Double.valueOf(numPackStatTF.getText())+"\t");
////                        System.out.print(Double.valueOf(numKitRackTF.getText())+"\t");
////                        System.out.print( Double.valueOf(numWRackTF.getText())+"\t");
////                        System.out.print(Double.valueOf(numKanRackTF.getText())+"\t");
////                        System.out.print(Double.valueOf(numMecTableTF.getText())+"\t");
////                        System.out.print( Double.valueOf(surSup2mTF.getText())+"\t");
////                        System.out.print(Double.valueOf(surFinTabTF.getText())+"\t");
////                        System.out.print(Double.valueOf(surPackStatTF.getText())+"\t");
////                        System.out.print(Double.valueOf(surKitRackTF.getText())+"\t");
////                        System.out.print( Double.valueOf(surWRackTF.getText())+"\t");
////                        System.out.print(Double.valueOf(surKanRackTF.getText())+"\t");
////                        System.out.print( Double.valueOf(surAsseyBHTF.getText())+"\t");
////                        System.out.print(Double.valueOf(surMecTableTF.getText())+"\t");
////                        System.out.print(date1+"\t");
////                        System.out.print(wla[0].getProd()+"\t");
////                        System.out.print(wla[0].getbL()+"\t");
////                        System.out.print(numOfSupp_R+"\t");
////                        System.out.print(NumFinTab_R+"\t");
////                        System.out.print(numPackStat_R+"\t");
////                        System.out.print(numKitRack_R+"\t");
////                        System.out.print(numWRack_R+"\t");
////                        System.out.print(numKanRack_R+"\t");
////                        System.out.print(numAsseyBH_R+"\t");
////                        System.out.print(numMecTable_R+"\t");
////                        
////                        System.out.print(surSup2m_R+"\t");
////                        System.out.print(surFinTab_R+"\t");
////                        System.out.print(surPackStat_R+"\t");
////                        System.out.print(surKitRack_R+"\t");
////                        System.out.print( surWRack_R+"\t");
////                        System.out.print(surKanRack_R+"\t");
////                        System.out.print(surMecTable_R+"\t");
////                        System.out.print(surAsseyBH_R+"\t");
////                        System.out.print(total_surface_needed+"\n");
//                    int affectedRows = statement.executeUpdate();
//                    //statement.addBatch();
//                    if (affectedRows > 0) {
//                        //System.out.println(total_surface_needed);
//                        
//                    }
//               
//                
//                
//
//                    JOptionPane.showInternalMessageDialog(null, "Mbrok elik");
//                    mainDialog.dispData();
//                    setVisible(false); //you can't see me!
//                    dispose();
//
//                
//            } //                String qu1 = "SELECT * FROM PROJECTS";
//            //                ResultSet rs = databaseHandler.execQuery(qu1);
//            //               // try {
//            //                    while (rs.next()) {
//            //                        System.out.print(rs.getString("id") + "\t");
//            //                        System.out.print(rs.getString("name") + "\t");
//            //                        System.out.print(rs.getString("type") + "\t");
//            //                        System.out.print(rs.getString("numShifts") + "\t");
//            //                        System.out.print(rs.getString("hoursPerMonth") + "\t");
//            //                        System.out.print(rs.getString("layUpRatio") + "\t");
//            //                        System.out.print(rs.getString("Line_Config") + "\n");
//            //                    }
//            //
//            //                //} catch (SQLException ex) {
//            //                    //JOptionPane.showMessageDialog(null, "Error:" + ex.getMessage(), "Error Occured", JOptionPane.ERROR_MESSAGE);
//            //
//            //               // }
//            catch (SQLException ex) {
//                JOptionPane.showMessageDialog(null, "Error:" + ex.getMessage(), "Error Occured", JOptionPane.ERROR_MESSAGE);
//                System.out.println("Exception at execQuery:dataHandler" + ex.getLocalizedMessage());
//                JOptionPane.showInternalMessageDialog(null, "9wdtiha");
//            }
////            String qu = "INSERT INTO PROJECTS VALUES ("
////                    +     projectID +","
////                    + "'" +     projectName +"',"
////                    + "'" +     projectType +"',"
////                    +      numShifts +","
////                    +    Double.valueOf(hoursPerMonth) +","
////                    +     layUpR +","
////                    + "'" +     LineConfig +"'"
////                    + " )";
////            System.out.println(qu);
////            if(databaseHandler.execAction(qu)){
////                JOptionPane.showInternalMessageDialog(null, "Mbrok elik");
////                mainDialog.dispData();
////                
////                setVisible(false); //you can't see me!
////                dispose();
////                String qu1 = "SELECT * FROM PROJECTS";
////                ResultSet rs  = databaseHandler.execQuery(qu1);
////                try{
////                    while(rs.next()){
////                        System.out.print(rs.getString("id")+"\t");
////                        System.out.print(rs.getString("name")+"\t");
////                        System.out.print(rs.getString("type")+"\t");
////                        System.out.print(rs.getString("numShifts")+"\t");
////                        System.out.print(rs.getString("hoursPerMonth")+"\t");
////                        System.out.print(rs.getString("layUpRatio")+"\t");
////                        System.out.print(rs.getString("Line_Config")+"\n");
////                    }
////                    
////                }
////                catch(SQLException ex){
////                     JOptionPane.showMessageDialog(null, "Error:" + ex.getMessage(), "Error Occured", JOptionPane.ERROR_MESSAGE);
////                    
////                }
////            }
////            else{
////                JOptionPane.showInternalMessageDialog(null, "9wdtiha");
////            }
//
//        }
////        int utilizedSides =  Integer.parseInt(utilizedSidesTF.getText());
////        double supportLength = Double.valueOf(supportLengthTF.getText());
////        double NumFinTab = Double.valueOf(NumFinTabTF.getText());
////        double numPackStat = Double.valueOf(NumFinTabTF.getText());
////        double numKitRack = Double.valueOf(numKitRackTF.getText());
////        double numWRack = Double.valueOf(numWRackTF.getText());
////        double numKanRack = Double.valueOf(numKanRackTF.getText());
////        double numMecTable = Double.valueOf(numMecTableTF.getText());
////        double surSup2m = Double.valueOf(surSup2mTF.getText());
////        double surFinTab = Double.valueOf(surFinTabTF.getText());
////        double surPackStat = Double.valueOf(surPackStatTF.getText());
////        double surKitRack = Double.valueOf(surKitRackTF.getText());
////        double surWRack = Double.valueOf(surWRackTF.getText());
////        double surKanRack = Double.valueOf(surKanRackTF.getText());
////        double surAsseyBH = Double.valueOf(surAsseyBHTF.getText());
////        double surMecTable = Double.valueOf(surMecTableTF.getText());
////        


    }//GEN-LAST:event_addProjectBtnMouseClicked

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        if(jRadioButton3.isSelected()){
        numShiftsF = 1;}
        if(jRadioButton4.isSelected()){
        numShiftsF = 2;}
        if(jRadioButton6.isSelected()){
        numShiftsF = 3;}
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
         if(jRadioButton3.isSelected()){
        numShiftsF = 1;}
        if(jRadioButton4.isSelected()){
        numShiftsF = 2;}
        if(jRadioButton6.isSelected()){
        numShiftsF = 3;}
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
         if(jRadioButton3.isSelected()){
        numShiftsF = 1;}
        if(jRadioButton4.isSelected()){
        numShiftsF = 2;}
        if(jRadioButton6.isSelected()){
        numShiftsF = 3;}
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void verticalCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalCheckActionPerformed
        if (verticalCheck.isSelected()) {
            utilizedSidesTF.setText("2");
            utilizedSides = 2;
        } else if (horizontalCheck.isSelected()) {
            utilizedSidesTF.setText("1");
            utilizedSides = 1;
        } else if (verticalCheck.isSelected() && horizontalCheck.isSelected()) {
            utilizedSidesTF.setText("2");
            utilizedSides = 2;
        }
    }//GEN-LAST:event_verticalCheckActionPerformed

    private void horizontalCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalCheckActionPerformed
        if (verticalCheck.isSelected()) {
            utilizedSidesTF.setText("2");
            utilizedSides = 2;
        } else if (horizontalCheck.isSelected()) {
            utilizedSidesTF.setText("1");
            utilizedSides = 1;
        } else if (verticalCheck.isSelected() && horizontalCheck.isSelected()) {
            utilizedSidesTF.setText("2");
            utilizedSides = 2;
        }
    }//GEN-LAST:event_horizontalCheckActionPerformed


    private void projectNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNameTFActionPerformed
        if (projectNameTF.getText().isBlank()) {
            projectNameTF.setBackground(Color.red);
        }
    }//GEN-LAST:event_projectNameTFActionPerformed

    @SuppressWarnings("unchecked")
    private void selectWLAfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectWLAfileMouseClicked
        if (isNotNumeric(indexTF.getText()) || indexTF.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter the row index of the project FIRST! ");
        } else {
            DefaultTableModel model;
            model = (DefaultTableModel) WLATable.getModel();
            //WLA[] wla = new WLA[15];
            model.setColumnCount(1);
            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
            wla_.clear();
           
            File f;
            FileInputStream excelFIS = null;
            BufferedInputStream excelBIS = null;
            XSSFWorkbook workbook = null;
            String defaultCurrentDirectoryPath = "C:\\Users\\you1-\\OneDrive\\Desktop";
            JFileChooser chooser1 = new JFileChooser(defaultCurrentDirectoryPath);
            chooser1.setDialogTitle("Select Excel File");
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL FILES", "xls", "xlsx", "xlsm");
            chooser1.setFileFilter(fnef);
            int chooserO = chooser1.showOpenDialog(null);

            if (chooserO == JFileChooser.APPROVE_OPTION) {
                try {
                    jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
                    f = chooser1.getSelectedFile();
                    WLAfilePTF.setText(f.getPath());
                    excelFIS = new FileInputStream(f);
                    excelBIS = new BufferedInputStream(excelFIS);

                    workbook = new XSSFWorkbook(excelBIS);
                    XSSFSheet sheetPH = workbook.getSheet("WLA");
                    

                    Row row = sheetPH.getRow(7);
                    Row row_ = sheetPH.getRow(Integer.valueOf(indexTF.getText()));

                    Vector vp = new Vector();
                    vp.add("Productivity");
                    Row row__ = sheetPH.getRow(Integer.valueOf(indexTF.getText()) - 1);
                    Vector vb = new Vector();
                    vb.add("Backlog");
                    for (int i = 2; i < 17; i++) {
                        WLA newWla = new WLA();
                        wla_.add(newWla);
                        
                        Cell month = row.getCell(i, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        
                        if (month != null) {
                            DateFormat df = new SimpleDateFormat("MM/yyyy");
                            Date date = month.getDateCellValue();
                            model.addColumn(df.format(date));
                            
                            newWla.setMonth(date);
                            //newWla.setMonth(date);
                            System.out.println(date);
                        }

                        Cell Prod = row_.getCell(i, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (Prod != null) {
                            newWla.setProd((double)Prod.getNumericCellValue());
                            vp.add(Prod.getNumericCellValue());
                            

                        }
                        Cell BackLog = row__.getCell(i, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (BackLog != null) {
                            
                            newWla.setbL((double)BackLog.getNumericCellValue());
                            vb.add(BackLog.getNumericCellValue());
                            
                        }
                        System.out.println(newWla.getMonth()+"\t"+newWla.getProd()+"\t"+newWla.getbL());
                        
                    }
                    model.addRow(vp);
                    model.addRow(vb);
                    
                    JOptionPane.showMessageDialog(null, "Imported Successfully !!.....");
                    jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                } catch (NullPointerException | HeadlessException | IOException npe) {

                } finally {
                    try {
                        if (excelFIS != null) {
                            excelFIS.close();
                        }
                        if (excelBIS != null) {
                            excelBIS.close();
                        }
                        if (workbook != null) {
                            workbook.close();
                        }
                    } catch (IOException iOException) {
                        JOptionPane.showMessageDialog(null, iOException.getMessage());
                    }
                }
            }
        }

    }//GEN-LAST:event_selectWLAfileMouseClicked

    private void selectPHfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectPHfileMouseClicked
        DefaultTableModel model;
        model = (DefaultTableModel) PHTable.getModel();//extraire le model du 
        //tableau pour les modifications
        model.getDataVector().removeAllElements();//initialiser le tableau
        model.fireTableDataChanged();//et supprimer toutes les données 
        sumNumB = 0;
        chargePH = 0;
        numPH_ =0;
        File f;//declaration de la variable fichier
        FileInputStream excelFIS = null;
        BufferedInputStream excelBIS = null;
        XSSFWorkbook workbook = null;
        int aexist = 0;
        for (int i = 0; i < namesP.size(); i++){
            if(namesP.get(i).equals(projectNameTF.getText()))
            {
                aexist++;// si on trouve qu'on a déja le projet
                break;
            }
        }
        if(projectNameTF.getText().isBlank()){//verification si on a bien entrer
            //le nom du projet
            JOptionPane.showMessageDialog(null, "Enter Project Name!");
        }
        else if(aexist!=0){
                    JOptionPane.showMessageDialog(null, "Project"
                            + " Already Exists!");
                    }
        
        else {
             Random rand = new Random();
            projectID = rand.nextInt(999);// generation d'un ID pour un projet
            String defaultCurrentDirectoryPath = "C:\\Users\\you1-\\OneDrive\\"
                    + "Desktop";// pour choisir le fichier on initialise 
            //l'endroit sur le bureau 
            JFileChooser chooser1 =
                    new JFileChooser(defaultCurrentDirectoryPath); //fenetre
            //pour choisir le fichier
            chooser1.setDialogTitle("Select Excel File");// titre de la fenetre
            FileNameExtensionFilter fnef = new FileNameExtensionFilter("EXCEL "
                    + "FILES", "xls", "xlsx", "xlsm");// filtrer les fichier à 
            //afficher
            chooser1.setFileFilter(fnef);
            int chooserO = chooser1.showOpenDialog(null);
            Ph_.clear();// supprime toutes les données de liste au cas ou on a 
            //changer le fichier à selectionne
            if (chooserO == JFileChooser.APPROVE_OPTION)//confirmation du 
            //fichier importé
            {
                try {
                    jPanel1.setCursor(new java.awt.Cursor(
                            java.awt.Cursor.WAIT_CURSOR));// on met le curseur 
                    //sous la forme d'attente au cours de l'execution du code
                    f = chooser1.getSelectedFile();//on prend le fichier 
                    //selectionne
                    phFilePathTF.setText(f.getPath());// on écrit son adresse 
                    //sur le pc
                    //initialisation des composants necessaires d'un fichier Ex
                    excelFIS = new FileInputStream(f);
                    excelBIS = new BufferedInputStream(excelFIS);
                    workbook = new XSSFWorkbook(excelBIS);
                    XSSFSheet sheetPH = workbook.getSheetAt(0);//on prend la 
                    //première feuille du fichier
                    s = 0;
                    int i = 1;
                    int numPh = 0;
                    Row row = sheetPH.getRow(i); // on commence à partir de la 
                    //deuxieme ligne
                    while (row != null) {// tant que la ligne est non nulle en 
                        //parcourt chaque ligne 
                        PH newPh = new PH();//creation d'une nouvelle classe
                        Ph_.add(newPh);// ajout dans la liste

                        Cell cell_PH_ID = row.getCell(0, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (cell_PH_ID != null) {
                            if (cell_PH_ID.getCellType() == STRING) {
                                newPh.setPH_ID(cell_PH_ID.getStringCellValue());
//                                    System.out.print(cell_PH_ID.getStringCellValue() + "\t");
                            } else {
                                newPh.setPH_ID(Integer.toString((int) cell_PH_ID.getNumericCellValue()));                         
                            }
                        }
                        Cell cell_PH_zone = row.getCell(1);
                        if (cell_PH_zone != null) {
                            newPh.setZone(cell_PH_zone.getStringCellValue());
                        }
                        Cell cell_PH_PHTS = row.getCell(2, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (cell_PH_PHTS != null) {
                            newPh.setPHperTS((int) cell_PH_PHTS.getNumericCellValue());
                        }
                        Cell cell_PH_AT = row.getCell(3, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (cell_PH_AT != null) {
                            newPh.setAT_H(cell_PH_AT.getNumericCellValue());
                        } 
                        Cell cell_PH_numOp = row.getCell(4, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (cell_PH_numOp != null) {
                            newPh.setNumOfOpsPerPH((int) cell_PH_numOp.getNumericCellValue());
                        } 

                        Cell cell_PH_shift = row.getCell(5, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (cell_PH_shift != null) {
                            newPh.setNumShifts((int) cell_PH_shift.getNumericCellValue());
                        }
                        Cell cell_PH_length = row.getCell(6, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                        if (cell_PH_length != null) {
                            newPh.setPHLength(cell_PH_length.getNumericCellValue());

                            newPh.setNumOfBoards(cell_PH_length.getNumericCellValue() / 2);
                            if (newPh.getPHLength() != 0) {
                                newPh.setPreChargePH((newPh.getAT_H() * newPh.getPHperTS()
                                        * newPh.getPHLength()) / (newPh.getNumOfOpsPerPH() * 
                                                newPh.getNumShifts()));
                            } else if ((newPh.getNumOfOpsPerPH() * newPh.getNumShifts()) != 0) {
                                newPh.setPreChargePH((newPh.getAT_H() * newPh.getPHperTS()) / 
                                        (newPh.getNumOfOpsPerPH() * newPh.getNumShifts()));
                            }
                        } else if ((newPh.getNumOfOpsPerPH() * newPh.getNumShifts()) != 0) {
                            newPh.setPreChargePH((newPh.getAT_H() * newPh.getPHperTS()) / 
                                    (newPh.getNumOfOpsPerPH() * newPh.getNumShifts()));
                        }//on ajoute les données qu'on a recupere au tableau pour les afficher 
                        // aux utilisateurs pour verification
                        model.addRow(new Object[]{newPh.getPH_ID(), newPh.getZone(),
                            newPh.getPHperTS(), newPh.getAT_H(), newPh.getNumOfOpsPerPH(),
                            newPh.getNumShifts(), newPh.getPHLength(), newPh.getNumOfBoards()});
                        if (s <= newPh.getPHLength()) {
                            s = (int) newPh.getPHLength();//pour avoir la longueur maximale
                        }
                        sumNumB += newPh.getNumOfBoards();//compter la somme des planches
                        chargePH += newPh.getPreChargePH();
                        i++;
                        numPh++;//compter le nombre de faisceaux

                        row = sheetPH.getRow(i);

                    }
                    numPH_ = numPh;
                    System.out.println("charge is " + chargePH);
                    System.out.println(s);
                    lineLength = (int) mRound(s, 2);
                    System.out.println(lineLength);
                    JOptionPane.showMessageDialog(null, "Imported Successfully !!.....");
                    jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

                } catch (NullPointerException | HeadlessException | IOException npe ) {

                } finally {
                    try {
                        if (excelFIS != null) {
                            excelFIS.close();
                        }
                        if (excelBIS != null) {
                            excelBIS.close();
                        }
                        if (workbook != null) {
                            workbook.close();
                        }
                    } catch (IOException iOException) {
                        JOptionPane.showMessageDialog(null, iOException.getMessage());
                    }
                }
            }
        }

    }//GEN-LAST:event_selectPHfileMouseClicked

    private void supportLengthTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supportLengthTFActionPerformed

    }//GEN-LAST:event_supportLengthTFActionPerformed

    private void supportLengthTFPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_supportLengthTFPropertyChange
          
                  
            
    }//GEN-LAST:event_supportLengthTFPropertyChange

    private void supportLengthTFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supportLengthTFMouseClicked
//           if(!isNumeric(supportLengthTF.getText())){
//            supportLengthTF.setBackground(Color.RED);
//            
//                  
//              }
//        else{
//            supportLengthTF.setBackground(Color.WHITE);
//        }
    }//GEN-LAST:event_supportLengthTFMouseClicked

    private void supportLengthTFInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_supportLengthTFInputMethodTextChanged

    }//GEN-LAST:event_supportLengthTFInputMethodTextChanged

    private void addProjectBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProjectBtnMousePressed
        ButtonModel LoomingM = RBLooming.getModel();
        ButtonModel InterM = RBCubInt.getModel();
        ButtonModel LayM = RBCubLay.getModel();
        
        String projectName = projectNameTF.getText();
      
        int numShifts = numShiftsF;
        String hoursPerMonth = hoursPerMonthTF.getText();
        double layUpR = jSlider1.getValue() * 0.01;

        String LineConfig = "";
        if (verticalCheck.isSelected()) {
            LineConfig = "Vertical";
        } else if (horizontalCheck.isSelected()) {
            LineConfig = "Horizontal";
        }
        if (verticalCheck.isSelected() && horizontalCheck.isSelected()) {
            LineConfig = "Vertical and Horizontal";
        }
        
        if (projectName.isEmpty() || numShifts == 0 || isNotNumeric(hoursPerMonth)) {
            JOptionPane.showInternalMessageDialog(null, "Enter Project Name and Choose Number Of Shifts\n Or enter a valid number of hours per month");

        } else if (isNotNumeric(supportLengthTF.getText()) || isNotNumeric(NumFinTabTF.getText())
                || isNotNumeric(numPackStatTF.getText()) || isNotNumeric(numKitRackTF.getText())
                || isNotNumeric(numWRackTF.getText()) || isNotNumeric(numKanRackTF.getText())
                || isNotNumeric(numMecTableTF.getText()) ) {
            JOptionPane.showMessageDialog(null, "Check Data entered in The Line Parameters", "Error Occured", JOptionPane.ERROR_MESSAGE);
        } else if (phFilePathTF.getText().isBlank() || WLAfilePTF.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter the necessary Files", "Error Occured", JOptionPane.ERROR_MESSAGE);
        
        } else {
            int cancel = JOptionPane.showInternalConfirmDialog(null, "Verify data entered and confirm", "Adding Project Confirmation", 0);
        if(cancel == JOptionPane.YES_OPTION){
            try {
                for (int i = 0; i < wla_.size(); i++) {
                PreparedStatement statement = 
                        DatabaseHandler.getInstance().getConnection().prepareStatement(
                        "INSERT INTO PROJECTS(id,"
                                + "name,"
                                + "type,"
                                + "numShifts,"
                                + "hoursPerMonth,"
                                + "layUpRatio,"
                                + "Linelength,"
                                + "Line_Config,"
                                + "Utilized_sides,"
                                + "charge,capacity,"
                                + "numOfVerticalLines,"
                                + "supportLength,"
                                + "NumFinTab,"
                                + "numPackStat,"
                                + "numKitRack,"
                                + "numWRack,"
                                + "numKanRack,"
                                + "numMecTable,"
                                + "surSup2m,"
                                + "surFinTab,"
                                + "surPackStat,"
                                + "surKitRack,"
                                + "surWRack,"
                                + "surKanRack,"
                                + "surAsseyBH,"
                                + "surMecTable,  "
                                + "month,"
                                + "Productivity,"
                                + "Backlog,"
                                + "numOfSupp_R,"
                                + "NumFinTab_R,"
                                + "numPackStat_R,"
                                + "numKitRack_R,"
                                + "numWRack_R,"
                                + "numKanRack_R,"
                                + "numMecTable_R,"
                                + "numAsseyBH_R,"
                                + "surSup2m_R,"
                                + "surFinTab_R,"
                                + "surPackStat_R,"
                                + "surKitRack_R,"
                                + "surWRack_R,"
                                + "surKanRack_R,"
                                + "surAsseyBH_R,"
                                + "surMecTable_R,"
                                + "total_surface_needed) "
                                
                             
                                + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                
                    
                    statement.setInt(1, projectID);
                    statement.setString(2, projectName);
                    String projectType;
                    if(LoomingM.isSelected()){
                        projectType = "Looming";
                    }
                    else if(InterM.isSelected()){
                        projectType = "Cub Integration";
                    }
                    else if(LayM.isSelected()){
                        projectType = "Cub Lay-Up";
                    }
                    else{
                        projectType = "";
                    }
                    statement.setString(3, projectType);
                    statement.setInt(4, numShifts);
                    statement.setDouble(5, Double.valueOf(hoursPerMonth));
                    statement.setDouble(6, layUpR);
                    int LINElength;
                    if(InterM.isSelected()||LayM.isSelected()){
                        LINElength =s;
                    }
                    else{
                        LINElength = lineLength;
                    }
                    statement.setInt(7, LINElength);
                    statement.setString(8, LineConfig);
                    statement.setInt(9, utilizedSides);
                    double charge;
                    if(wla_.get(i).getProd()==0){
                        charge = 0;
                    }
                    else{
                        charge = layUpR * chargePH *(wla_.get(i).getbL()/ wla_.get(i).getProd());
                    }
                    statement.setDouble(10, charge);
                    double capacity;
                    if (LINElength == 0) {
                        capacity = Double.valueOf(hoursPerMonth);
                        
                    } else {
                        capacity = Double.valueOf(hoursPerMonth) * LINElength * utilizedSides;
                    }
                    statement.setDouble(11, capacity);
                    double numOfVerticalLines; //= (int) Math.ceil((charge / capacity));
                    if(buttonGroup1.isSelected(LayM)){
                        if (charge == 0) {
                            numOfVerticalLines = 0;
                        } else {
                            if (charge / capacity < (numPH_/2)) {
                                numOfVerticalLines = (int) numPH_/2;
                            } else {
                                numOfVerticalLines = (int) Math.ceil((charge / capacity));
                            }
                        }
                    }
                    
                    else if (buttonGroup1.isSelected(InterM)) {
                        if (charge == 0) {
                            numOfVerticalLines = 0;
                        } else {
                            if (charge / capacity < numPH_) {
                                numOfVerticalLines = numPH_;
                            } else {
                                numOfVerticalLines = (int) Math.ceil((charge / capacity));
                            }
                        }
                    } else {
                        numOfVerticalLines = (int) Math.ceil((charge / capacity));
                    }
                    
                    statement.setDouble(12, numOfVerticalLines);
                    statement.setDouble(13, Double.valueOf(supportLengthTF.getText()));
                    statement.setDouble(14, Double.valueOf(NumFinTabTF.getText()));
                    statement.setDouble(15, Double.valueOf(numPackStatTF.getText()));
                    statement.setDouble(16, Double.valueOf(numKitRackTF.getText()));
                    statement.setDouble(17, Double.valueOf(numWRackTF.getText()));
                    statement.setDouble(18, Double.valueOf(numKanRackTF.getText()));
                    statement.setDouble(19, Double.valueOf(numMecTableTF.getText()));
                    statement.setDouble(20, Double.valueOf(surSup2mTF.getText()));
                    statement.setDouble(21, Double.valueOf(surFinTabTF.getText()));
                    statement.setDouble(22, Double.valueOf(surPackStatTF.getText()));
                    statement.setDouble(23, Double.valueOf(surKitRackTF.getText()));
                    statement.setDouble(24, Double.valueOf(surWRackTF.getText()));
                    statement.setDouble(25, Double.valueOf(surKanRackTF.getText()));
                    statement.setDouble(26, Double.valueOf(surAsseyBHTF.getText()));
                    statement.setDouble(27, Double.valueOf(surMecTableTF.getText()));
                    long timeInMilliSeconds = wla_.get(i).getMonth().getTime();
                    java.sql.Date date1 = new java.sql.Date(timeInMilliSeconds);
                    statement.setDate(28, date1);
                    statement.setDouble(29, wla_.get(i).getProd());
                    statement.setDouble(30, wla_.get(i).getbL());
                    double numOfSupp_R;
                    if (LINElength == 0 || Double.valueOf(supportLengthTF.getText()) == 0) {
                        numOfSupp_R = numOfVerticalLines;
                        statement.setDouble(31, numOfSupp_R);
                    } else {
                        numOfSupp_R = numOfVerticalLines * LINElength / Double.valueOf(supportLengthTF.getText());
                        statement.setDouble(31, numOfSupp_R);
                    }
                    double NumFinTab_R = numOfVerticalLines * Double.valueOf(NumFinTabTF.getText());
                    statement.setDouble(32, NumFinTab_R);
                    double numPackStat_R = numOfVerticalLines * Double.valueOf(numPackStatTF.getText());
                    statement.setDouble(33,numPackStat_R);
                    double numKitRack_R = numOfVerticalLines *Double.valueOf(numKitRackTF.getText());
                    statement.setDouble(34, numKitRack_R);
                    double numWRack_R = numOfVerticalLines *Double.valueOf(numWRackTF.getText());
                    statement.setDouble(35, numWRack_R);
                    double numKanRack_R = numOfVerticalLines *Double.valueOf(numKanRackTF.getText());
                    statement.setDouble(36, numKanRack_R); 
                    double numMecTable_R = numOfVerticalLines *Double.valueOf(numMecTableTF.getText());
                    statement.setDouble(37, numMecTable_R);
                    double numAsseyBH_R = getAsseyH(numOfSupp_R,charge,sumNumB);
                    statement.setDouble(38, numAsseyBH_R);
                    double surSup2m_R = numOfSupp_R * Double.valueOf(surSup2mTF.getText());
                    double surFinTab_R = NumFinTab_R * Double.valueOf(surFinTabTF.getText());
                    double surPackStat_R = numPackStat_R * Double.valueOf(surPackStatTF.getText());
                    double surKitRack_R = numKitRack_R * Double.valueOf(surKitRackTF.getText());
                    double surWRack_R = numWRack_R * Double.valueOf(surWRackTF.getText());
                    double surKanRack_R = numKanRack_R * Double.valueOf(surKanRackTF.getText());
                    double surAsseyBH_R = numAsseyBH_R * Double.valueOf(surAsseyBHTF.getText());
                    double surMecTable_R = numMecTable_R * Double.valueOf(surMecTableTF.getText());
                    double total_surface_needed = 1.1* (surSup2m_R + surFinTab_R + surPackStat_R + surKitRack_R + surWRack_R  
                            +surKanRack_R + surAsseyBH_R +surMecTable_R);
                    statement.setDouble(39,surSup2m_R );
                    statement.setDouble(40,surFinTab_R );
                    statement.setDouble(41, surPackStat_R);
                    statement.setDouble(42,surKitRack_R );
                    statement.setDouble(43, surWRack_R );
                    statement.setDouble(44,surKanRack_R );
                    statement.setDouble(45, surMecTable_R);
                    statement.setDouble(46,surAsseyBH_R );
                    statement.setDouble(47, total_surface_needed);
                        System.out.print(projectID+"\t");
                        System.out.print(projectName+"\t");
                        System.out.print(projectType+"\t");
                        System.out.print(numShifts+"\t");
                        System.out.print(Double.valueOf(hoursPerMonth)+"\t");
                        System.out.print(layUpR+"\t");
                        System.out.print(LINElength+"\t");
                        System.out.print(LineConfig+"\t");
                        System.out.print(utilizedSides+"\t");
                        System.out.print(charge+"\t");
                        System.out.print(capacity+"\t");
                        System.out.print(numOfVerticalLines+"\t");
                        System.out.print( Double.valueOf(supportLengthTF.getText())+"\t");
                        System.out.print(Double.valueOf(NumFinTabTF.getText())+"\t");
                        System.out.print(Double.valueOf(numPackStatTF.getText())+"\t");
                        System.out.print(Double.valueOf(numKitRackTF.getText())+"\t");
                        System.out.print( Double.valueOf(numWRackTF.getText())+"\t");
                        System.out.print(Double.valueOf(numKanRackTF.getText())+"\t");
                        System.out.print(Double.valueOf(numMecTableTF.getText())+"\t");
                        System.out.print( Double.valueOf(surSup2mTF.getText())+"\t");
                        System.out.print(Double.valueOf(surFinTabTF.getText())+"\t");
                        System.out.print(Double.valueOf(surPackStatTF.getText())+"\t");
                        System.out.print(Double.valueOf(surKitRackTF.getText())+"\t");
                        System.out.print( Double.valueOf(surWRackTF.getText())+"\t");
                        System.out.print(Double.valueOf(surKanRackTF.getText())+"\t");
                        System.out.print( Double.valueOf(surAsseyBHTF.getText())+"\t");
                        System.out.print(Double.valueOf(surMecTableTF.getText())+"\t");
                        System.out.print(date1+"\t");
                        System.out.print(wla_.get(i).getProd()+"\t");
                        System.out.print(wla_.get(i).getbL()+"\t");
                        System.out.print(numOfSupp_R+"\t");
                        System.out.print(NumFinTab_R+"\t");
                        System.out.print(numPackStat_R+"\t");
                        System.out.print(numKitRack_R+"\t");
                        System.out.print(numWRack_R+"\t");
                        System.out.print(numKanRack_R+"\t");
                        System.out.print(numAsseyBH_R+"\t");
                        System.out.print(numMecTable_R+"\t");
                        
                        System.out.print(surSup2m_R+"\t");
                        System.out.print(surFinTab_R+"\t");
                        System.out.print(surPackStat_R+"\t");
                        System.out.print(surKitRack_R+"\t");
                        System.out.print( surWRack_R+"\t");
                        System.out.print(surKanRack_R+"\t");
                        System.out.print(surMecTable_R+"\t");
                        System.out.print(surAsseyBH_R+"\t");
                        System.out.print(total_surface_needed+"\n");
                    int affectedRows = statement.executeUpdate();
                    //statement.addBatch();
                    if (affectedRows > 0) {
                        //System.out.println(total_surface_needed);
                        
                    }
               
                }
                    
                    for (int i = 0; i < Ph_.size(); i++){
                        PreparedStatement statement =
                                DatabaseHandler.getInstance().getConnection().prepareStatement(
                    "INSERT INTO PH(P_id,PH_id,zone,phts,At_H,numOp,numShift,lengthPH,numBoard)"
                                            + " " + "VALUES(?,?,?,?,?,?,?,?,?)");
                            statement.setInt(1, projectID);
                            statement.setString(2, Ph_.get(i).getPH_ID());
                            statement.setString(3, Ph_.get(i).getZone());
                            statement.setInt(4, Ph_.get(i).getPHperTS());
                            statement.setDouble(5, Ph_.get(i).getAT_H());
                            statement.setInt(6, Ph_.get(i).getNumOfOpsPerPH());
                            statement.setInt(7, Ph_.get(i).getNumShifts());
                            statement.setDouble(8, Ph_.get(i).getPHLength());
                            statement.setDouble(9, Ph_.get(i).getNumOfBoards());
                            
                    
                            int affectedRows = statement.executeUpdate();
                            if (affectedRows > 0) {
                                System.out.println("success!");
                            }
                    }
                    JOptionPane.showInternalMessageDialog(null, "Project Successfully Added!");
                    
                    mainDialog.namesP = mainDialog.pickNames(); 
                    mainDialog.dispData();
                    mainDialog.monthlyfpe();
                    setVisible(false); //you can't see me!
                    dispose();

                
            }
            catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error:" + ex.getMessage(), "Error Occured", JOptionPane.ERROR_MESSAGE);
                System.out.println("Exception at execQuery:dataHandler" + ex.getLocalizedMessage());
                JOptionPane.showInternalMessageDialog(null, "9wdtiha");
            }
//            String qu = "INSERT INTO PROJECTS VALUES ("
//                    +     projectID +","
//                    + "'" +     projectName +"',"
//                    + "'" +     projectType +"',"
//                    +      numShifts +","
//                    +    Double.valueOf(hoursPerMonth) +","
//                    +     layUpR +","
//                    + "'" +     LineConfig +"'"
//                    + " )";
//            System.out.println(qu);
//            if(databaseHandler.execAction(qu)){
//                JOptionPane.showInternalMessageDialog(null, "Mbrok elik");
//                mainDialog.dispData();
//                
//                setVisible(false); //you can't see me!
//                dispose();
//                String qu1 = "SELECT * FROM PROJECTS";
//                ResultSet rs  = databaseHandler.execQuery(qu1);
//                try{
//                    while(rs.next()){
//                        System.out.print(rs.getString("id")+"\t");
//                        System.out.print(rs.getString("name")+"\t");
//                        System.out.print(rs.getString("type")+"\t");
//                        System.out.print(rs.getString("numShifts")+"\t");
//                        System.out.print(rs.getString("hoursPerMonth")+"\t");
//                        System.out.print(rs.getString("layUpRatio")+"\t");
//                        System.out.print(rs.getString("Line_Config")+"\n");
//                    }
//                    
//                }
//                catch(SQLException ex){
//                     JOptionPane.showMessageDialog(null, "Error:" + ex.getMessage(), "Error Occured", JOptionPane.ERROR_MESSAGE);
//                    
//                }
//            }
//            else{
//                JOptionPane.showInternalMessageDialog(null, "9wdtiha");
//            }

        }}
//        int utilizedSides =  Integer.parseInt(utilizedSidesTF.getText());
//        double supportLength = Double.valueOf(supportLengthTF.getText());
//        double NumFinTab = Double.valueOf(NumFinTabTF.getText());
//        double numPackStat = Double.valueOf(NumFinTabTF.getText());
//        double numKitRack = Double.valueOf(numKitRackTF.getText());
//        double numWRack = Double.valueOf(numWRackTF.getText());
//        double numKanRack = Double.valueOf(numKanRackTF.getText());
//        double numMecTable = Double.valueOf(numMecTableTF.getText());
//        double surSup2m = Double.valueOf(surSup2mTF.getText());
//        double surFinTab = Double.valueOf(surFinTabTF.getText());
//        double surPackStat = Double.valueOf(surPackStatTF.getText());
//        double surKitRack = Double.valueOf(surKitRackTF.getText());
//        double surWRack = Double.valueOf(surWRackTF.getText());
//        double surKanRack = Double.valueOf(surKanRackTF.getText());
//        double surAsseyBH = Double.valueOf(surAsseyBHTF.getText());
//        double surMecTable = Double.valueOf(surMecTableTF.getText());
//        

    }//GEN-LAST:event_addProjectBtnMousePressed

    private void selectPHfileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectPHfileMouseEntered
        setbtnColor(selectPHfile);
    }//GEN-LAST:event_selectPHfileMouseEntered

    private void selectPHfileMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectPHfileMouseExited
        resetbtnColor(selectPHfile);
    }//GEN-LAST:event_selectPHfileMouseExited

    private void selectWLAfileMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectWLAfileMouseEntered
        setbtnColor(selectWLAfile); 
    }//GEN-LAST:event_selectWLAfileMouseEntered

    private void selectWLAfileMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectWLAfileMouseExited
        resetbtnColor(selectWLAfile);
    }//GEN-LAST:event_selectWLAfileMouseExited

    private void addProjectBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProjectBtn1MouseClicked
        int cancel = JOptionPane.showInternalConfirmDialog(null, "Are you sure you want to cancel operation", "Cancel Confirmation", 0);
        if(cancel == JOptionPane.YES_OPTION){
            setVisible(false); //you can't see me!
            dispose();
        }
        
                
                
                
                    
                
                
    }//GEN-LAST:event_addProjectBtn1MouseClicked

    private void addProjectBtn1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProjectBtn1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_addProjectBtn1MousePressed

    private void addProjectBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProjectBtnMouseEntered
        setbtnColor(addProjectBtn);
    }//GEN-LAST:event_addProjectBtnMouseEntered

    private void addProjectBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addProjectBtnMouseExited
         resetbtnColor(addProjectBtn);
    }//GEN-LAST:event_addProjectBtnMouseExited

    private void RBLoomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBLoomingActionPerformed
        jSlider1.setValue(80);
        supportLengthTF.setText("2");
        NumFinTabTF.setText("1");
        numPackStatTF.setText("1");
        numKitRackTF.setText("2");
        numWRackTF.setText("2");
        numKanRackTF.setText("0.25");
        numMecTableTF.setText("0");
    }//GEN-LAST:event_RBLoomingActionPerformed

    private void RBCubIntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBCubIntActionPerformed
        jSlider1.setValue(45);
        supportLengthTF.setText("0");
        NumFinTabTF.setText("0");
        numPackStatTF.setText("0");
        numKitRackTF.setText("2");
        numWRackTF.setText("0");
        numKanRackTF.setText("0");
        numMecTableTF.setText("0.5");
    }//GEN-LAST:event_RBCubIntActionPerformed

    private void RBCubLayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBCubLayActionPerformed
        jSlider1.setValue(45);
        supportLengthTF.setText("2");
        NumFinTabTF.setText("2");
        numPackStatTF.setText("0");
        numKitRackTF.setText("2");
        numWRackTF.setText("2");
        numKanRackTF.setText("0.25");
        numMecTableTF.setText("0");
    }//GEN-LAST:event_RBCubLayActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(detailsEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(detailsEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(detailsEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(detailsEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new detailsEntry().setVisible(true);
            }
        });
    }
    public void setbtnColor(JLabel lb){
        lb.setBackground(new Color(0,141,160));
        
    }
    public void resetbtnColor(JLabel lb){
        lb.setBackground(new Color(8,178,164));
        
    }

    private int numShiftsF = 0;
    private int utilizedSides = 0;
    private int projectID =0;
    private int s;
    private int lineLength;
    private double sumNumB =0;
    public static boolean isNotNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return true;
        }
        return false;
    }
    class PH {

        private String PH_ID;
        private String _Zone;
        private int _PHperTS;
        private double _AT_H;
        private int _numOfOpsPerPH;
        private int _numShifts;
        private double _PHLength;
        private double _numOfBoards;
        private double _preChargePH;

        public PH() {
            this.PH_ID = null;
            this._Zone = "";
            this._PHperTS = 0;
            this._AT_H = 0;
            this._numOfOpsPerPH = 0;
            this._numShifts = 0;
            this._PHLength = 0;
            this._numOfBoards = 0;
            this._preChargePH = 0;
        }

        public String getPH_ID() {
            return PH_ID;
        }

        public String getZone() {
            return _Zone;
        }

        public int getPHperTS() {
            return _PHperTS;
        }

        public double getAT_H() {
            return _AT_H;
        }

        public int getNumOfOpsPerPH() {
            return _numOfOpsPerPH;
        }

        public int getNumShifts() {
            return _numShifts;
        }

        public double getPHLength() {
            return _PHLength;
        }

        public double getNumOfBoards() {
            return _numOfBoards;
        }

        public double getPreChargePH() {
            return _preChargePH;
        }
        
        public void setPH_ID(String PH_ID) {
            this.PH_ID = PH_ID;
        }

        public void setZone(String _Zone) {
            this._Zone = _Zone;
        }

        public void setPHperTS(int _PHperTS) {
            this._PHperTS = _PHperTS;
        }

        public void setAT_H(double _AT_H) {
            this._AT_H = _AT_H;
        }

        public void setNumOfOpsPerPH(int _numOfOpsPerPH) {
            this._numOfOpsPerPH = _numOfOpsPerPH;
        }

        public void setNumShifts(int _numShifts) {
            this._numShifts = _numShifts;
        }

        public void setPHLength(double _PHLength) {
            this._PHLength = _PHLength;
        }

        public void setNumOfBoards(double _numOfBoards) {
            this._numOfBoards = _numOfBoards;
        }

        public void setPreChargePH(double _preChargePH) {
            this._preChargePH = _preChargePH;
        }
        
    }
    class WLA{
        private Date month;
        private double prod;
        private double bL;

        public WLA() {
            this.month = new Date();
            this.prod = 0;
            this.bL = 0;
        }

        

        public Date getMonth() {
            return month;
        }

        public double getProd() {
            return prod;
        }

        public double getbL() {
            return bL;
        }

        public void setMonth(Date month) {
            this.month = month;
        }

        public void setProd(double prod) {
            this.prod = prod;
        }

        public void setbL(double bL) {
            this.bL = bL;
        }
        
    }
    
   

    private ArrayList<PH> Ph_ = new ArrayList<PH>();
    
    private ArrayList<WLA> wla_ = new ArrayList<WLA>();
    private double chargePH = 0;
    private int numPH_;

    double mRound(double value, double factor) {
    return Math.round(value / factor) * factor;
    }

    double getAsseyH(double numSupp , double charge, double sumNumB){
        double r;
        if (charge ==0){
            r = 0;
        }
        else if(sumNumB-numSupp*4>0){
            r = (sumNumB-numSupp*4)/11;
        }
        else{
            r =0;
        }
        
        return r;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField NumFinTabTF;
    private javax.swing.JTable PHTable;
    private javax.swing.JRadioButton RBCubInt;
    private javax.swing.JRadioButton RBCubLay;
    private javax.swing.JRadioButton RBLooming;
    private javax.swing.JTable WLATable;
    private javax.swing.JTextField WLAfilePTF;
    private javax.swing.JLabel addProjectBtn;
    private javax.swing.JLabel addProjectBtn1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox horizontalCheck;
    private javax.swing.JTextField hoursPerMonthTF;
    private javax.swing.JTextField indexTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField numKanRackTF;
    private javax.swing.JTextField numKitRackTF;
    private javax.swing.JTextField numMecTableTF;
    private javax.swing.JTextField numPackStatTF;
    private javax.swing.JTextField numWRackTF;
    private javax.swing.JTextField phFilePathTF;
    private javax.swing.JTextField projectNameTF;
    private javax.swing.JLabel selectPHfile;
    private javax.swing.JLabel selectWLAfile;
    private javax.swing.JLabel slidervalue;
    private javax.swing.JTextField supportLengthTF;
    private javax.swing.JTextField surAsseyBHTF;
    private javax.swing.JTextField surFinTabTF;
    private javax.swing.JTextField surKanRackTF;
    private javax.swing.JTextField surKitRackTF;
    private javax.swing.JTextField surMecTableTF;
    private javax.swing.JTextField surPackStatTF;
    private javax.swing.JTextField surSup2mTF;
    private javax.swing.JTextField surWRackTF;
    private javax.swing.JTextField utilizedSidesTF;
    private javax.swing.JCheckBox verticalCheck;
    // End of variables declaration//GEN-END:variables
}
